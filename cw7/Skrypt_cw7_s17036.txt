1.
a)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
def Odczyt(lista : List[String]) = {
  var str:String=""
  for (dzien <- lista) str=str+dzien+", "
  str = str.substring(0, str.length() -2)
  println(str)
  }
Odczyt(Tydzien)

b)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
def Odczyt(lista : List[String]) = {
  var str:String=""
  for (dzien <- lista if dzien.startsWith("P")) str=str+dzien+", "
  str = str.substring(0, str.length() -2)
  println(str)
  }
Odczyt(Tydzien)

c)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
def Odczyt(lista : List[String]) = {
  var len:Int=lista.length
  var i:Int=0
  var str:String=""
  while(i < len){
    str=str+lista(i)+", ";
    i=i+1;
  }
  str = str.substring(0, str.length() -2)
  println(str)}

Odczyt(Tydzien)

2.

a)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
val nr : Int = Tydzien.length
def Odczyt(lista : List[String], str : String, nr : Int): String = {
    var len : Int = lista.length
    var i : Int= len - nr
  
    if (i < len-1) {
      val n = nr-1
      val s = str + lista(i) + ", "
      Odczyt(lista, s, n)
    }
    else {
      return str+lista(i)
    }
  }
Odczyt(Tydzien, "", nr)

b)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
val nr : Int = Tydzien.length
def Odczyt(lista : List[String], str : String, nr : Int): String = {
  
    if (nr > 0) {
      val n = nr-1
      val s = str + lista(nr) + ", "
      Odczyt(lista, s, n)
    }
    else {
      return str+lista(nr)
    }
  }
Odczyt(Tydzien, "", nr-1)


3.

val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
val nr : Int = Tydzien.length
def REC(l : List[String], n : Int): String = {
  @scala.annotation.tailrec
  def Odczyt(lista : List[String], str : String, nr : Int): String = {
    var len : Int = lista.length
    var i : Int= len - nr
  
    if (i < len-1) Odczyt(lista, str = str + lista(i) + ", ", nr-1)
    else {
      return str+lista(i)
    }
  }
  Odczyt(l, "", n)
}
REC(Tydzien, nr)

4.
a)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
val nr : Int = Tydzien.length
def Odczyt(lista : List[String]): String = {
    var str : String = ""
    
    str = lista.foldLeft("")((a, b) => a+", "+b)
    str = str.substring(2, str.length())
    return str
  }
Odczyt(Tydzien)

b)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
val nr : Int = Tydzien.length
def Odczyt(lista : List[String]): String = {
    var str : String = ""
    
    str = lista.foldRight("")((a, b) => a+", "+b)
    str = str.substring(0, str.length() -2)
    return str
  }
Odczyt(Tydzien)

c)
val Tydzien: List[String] = List("Poniedzialek", "Wtorek", "Sroda", "Czwartek", "Piatek", "Sobota", "Niedziela")
val nr : Int = Tydzien.length
def Odczyt(lista : List[String]): String = {
    var str : String = ""
    var lista1: List[String] = lista.filter(_.contains("P"))
    str = lista1.foldLeft("")((a, b) => a+", "+b)
    str = str.substring(2, str.length())
    return str
  }
Odczyt(Tydzien)

5.
var products = Map("potato" -> 1, "tomato" -> 6, "peper" -> 8)
var sale = products.view.mapValues(_*0.9).toMap
println(sale)

6.
var krotka = Tuple3(6, "6", '6')
println(krotka)

7.
var mapa = Map(1 -> "A", 2 -> "B", 3 -> "C", 4 -> "D", 5 -> "E", 6 -> "" )
val b:Option[String] = Some("Brak wartosci")
println(b.getOrElse(mapa(6)))

8.
var list1 = List(1, 0, 2, 3, 0, 4, 0, 5)
def REC(list: List[Int]) = {
  var list2 = List()
  @scala.annotation.tailrec
  def zeroClear(in: List[Int], out: List[Int], nr: Int): List[Int] = {
    var l = in.length
    if (nr<l){
      if (in(nr)==0) zeroClear(in, out, nr+1)
      else zeroClear(in, out :+ in(nr), nr+1);
      }
    else return out
  }
  zeroClear(list, list2, 0)
}

println(REC(list1))

9.
var list = List(1, 0, 2, 9, 0, 4, 0, 5)
def plusOne(in: List[Int]): List[Int] ={
  var out: List[Int] = in
  out = out map(_ +1)
  return out
}

println(plusOne(list))

10.
import scala.language.postfixOps
var list = List(-1, 0.5, 2.4, 9, -5, 4.3, 0, -5.25)
def absMore(in: List[Double]): List[Double] ={
  var out: List[Double] = in
  out = out filter(_ > -5) filter(_ < 12) map(_ abs)
  
  return out
}

println(absMore(list))